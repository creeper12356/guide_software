<?xml version="1.0" ?>
<component id="root" name="root">
  <component id="system" name="system">
    <!--McPAT will skip the components if number is set to 0 -->
    <param name="number_of_cores" value="1"/>
    <param name="number_of_L1Directories" value="0"/>
    <param name="number_of_L2Directories" value="0"/>
    <param name="number_of_L2s" value="1"/>
    <!-- This number means how many L2 clusters in each cluster there can be multiple banks/ports -->
    <param name="Private_L2" value="0"/>
    <!--1 Private, 0 shared/coherent -->
    <param name="number_of_L3s" value="0"/>
    <!-- This number means how many L3 clusters -->
    <param name="number_of_NoCs" value="1"/>
    <param name="homogeneous_cores" value="1"/>
    <!--1 means homo -->
    <param name="homogeneous_L2s" value="1"/>
    <param name="homogeneous_L1Directories" value="0"/>
    <param name="homogeneous_L2Directories" value="0"/>
    <param name="homogeneous_L3s" value="0"/>
    <param name="homogeneous_ccs" value="0"/>.
    <!--cache coherence hardware -->
    <param name="homogeneous_NoCs" value="1"/>


    <!--according to GPT answers -->
    <!--param name="core_tech_node" value="65"/ -->
    <param name="core_tech_node" value="65"/>




    <!-- nm -->
    <param name="target_core_clockrate" value="1000"/>
    <!--MHz -->
    <param name="temperature" value="340"/>
    <!-- Kelvin -->



    
    <param name="number_cache_levels" value="1"/>



    <param name="interconnect_projection_type" value="0"/>
    <!--0: aggressive wire technology; 1: conservative wire technology -->
    <param name="device_type" value="0"/>
    <!--0: HP(High Performance Type); 1: LSTP(Low standby power) 2: LOP (Low Operating Power)  -->
    <param name="longer_channel_device" value="0"/>
    <!-- 0 no use; 1 use when possible -->
    <param name="power_gating" value="1"/>
    <!-- 0 not enabled; 1 enabled -->
    <param name="machine_bits" value="64"/>


    
    <!--param name="virtual_address_width" value="64"/-->
    <param name="virtual_address_width" value="44"/>
    <!--param name="physical_address_width" value="52"/-->
    <param name="physical_address_width" value="44"/>



    <param name="virtual_memory_page_size" value="4096"/>
    



    <stat name="total_cycles" value="stats.system.cpu.numCycles"/>
    <stat name="idle_cycles" value="stats.system.cpu.idleCycles"/>
    <stat name="busy_cycles" value="stats.system.cpu.numCycles - stats.system.cpu.idleCycles"/>


    
    <component id="system.core" name="core">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <!--param name="clock_rate" value="config.system.clk_domain.clock"/-->
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1"/>
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <param name="opt_local" value="1"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="8"/>
      <param name="opcode_width" value="8"/>
      <param name="x86" value="1"/>


      <param name="micro_opcode_width" value="8"/>
      <!--param name="micro_opcode_width" value="8"/-->


      <param name="machine_type" value="0"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      
      <param name="fetch_width" value="8"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="8"/>
      
      <param name="issue_width" value="8"/>
      <param name="peak_issue_width" value="8"/>
      
      <param name="commit_width" value="8"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="2"/>
      <param name="prediction_width" value="1"/>
      


      <param name="pipelines_per_core" value="6,6"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="16,16"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->



      <param name="ALU_per_core" value="8"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="2"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="4"/>
      <!-- buffer between IF and ID stage -->




      <param name="instruction_buffer_size" value="64"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="32"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="64"/>
      <param name="fp_instruction_window_size" value="64"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="192"/>
      <!-- param name="ROB_size" value="config.cou.0.numROBEntries"/ -->
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->



      <param name="archi_Regs_IRF_size" value="32"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="32"/>
      <!-- MMX + XMM -->


      <!--  if OoO processor, phy_reg number is needed for renaming logic, 
      renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="256"/>
      <!-- param name="phy_Regs_IRF_size" value="config.system.cpu.numPhysIntRegs"/-->
      <param name="phy_Regs_FRF_size" value="256"/>
      <!--param name="phy_Regs_FRF_size" value="config.system.cpu.numPhysFloatRegs"/-->
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme 
      RAM-based scheme will have free list, status table;
      CAM-based scheme have the valid bit in the data field of the CAM 
      both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
      Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="8"/>
      <!-- how many windows in the windowed register file, sun processors;
      no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
      They will always try to execute out-of-order though. -->


      <param name="LSU_order" value="outorder"/>
      <!--param name="LSU_order" value="outorder"/-->



      
      
      <param name="store_buffer_size" value="32"/>
      <!--param name="store_buffer_size" value="config.system.cpu.SQEntries"/ -->
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="32"/>
      <!--param name="load_buffer_size" value="config.system.cpu.LQEntries"/ -->
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="2"/>
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- param name="RAS_size" value="config.system.cpu.branchPred.RASSize"/-->
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="stats.system.cpu.commit.op_class_0::total"/>
      <stat name="int_instructions" value="stats.system.cpu.commit.op_class_0::No_OpClass + stats.system.cpu.commit.op_class_0::IntAlu +	stats.system.cpu.commit.op_class_0::IntMult + stats.system.cpu.commit.op_class_0::IntDiv + stats.system.cpu.commit.op_class_0::IprAccess"/>
      <stat name="fp_instructions" value="stats.system.cpu.commit.op_class_0::FloatAdd + stats.system.cpu.commit.op_class_0::FloatCmp + stats.system.cpu.commit.op_class_0::FloatCvt + stats.system.cpu.commit.op_class_0::FloatMult + stats.system.cpu.commit.op_class_0::FloatDiv + stats.system.cpu.commit.op_class_0::FloatMisc + stats.system.cpu.commit.op_class_0::FloatSqrt"/>
      <stat name="branch_instructions" value="stats.system.cpu.branchPred.condPredicted"/>
      <stat name="branch_mispredictions" value="stats.system.cpu.branchPred.condIncorrect"/>
      <stat name="load_instructions" value="stats.system.cpu.commit.op_class_0::MemRead + system.cpu.commit.op_class_0::FloatMemRead + stats.system.cpu.commit.op_class_0::InstPrefetch"/>
      <stat name="store_instructions" value="stats.system.cpu.commit.op_class_0::MemWrite + system.cpu.commit.op_class_0::FloatMemWrite"/>
      <stat name="committed_instructions" value="stats.system.cpu.committedInsts"/>
      <stat name="committed_int_instructions" value="stats.system.cpu.commit.int_insts"/>
      <stat name="committed_fp_instructions" value="stats.system.cpu.commit.fp_insts"/>

      <stat name="pipeline_duty_cycle" value="1"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      
        
        
        
        
        
        
        
        
        
        
        
        
      
      <stat name="total_cycles" value="stats.system.cpu.numCycles"/>
      <stat name="idle_cycles" value="stats.system.cpu.idleCycles"/>
      <stat name="busy_cycles" value="stats.system.cpu.numCycles - stats.system.cpu.idleCycles"/>

      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      <!-- instruction buffer stats -->
      <stat name="ROB_reads" value="stats.system.cpu.rob.rob_reads"/>
      <stat name="ROB_writes" value="stats.system.cpu.rob.rob_writes"/>
      <stat name="rename_writes" value="stats.system.cpu.rename.int_rename_lookups"/>
      <stat name="rename_writes" value="stats.system.cpu.rename.RenamedOperands * stats.system.cpu.rename.int_rename_lookups / stats.system.cpu.rename.RenameLookups"/>
      <stat name="fp_rename_reads" value="stats.system.cpu.rename.fp_rename_lookups"/>
      <stat name="fp_rename_writes" value="stats.system.cpu.rename.RenamedOperands * stats.system.cpu.rename.fp_rename_lookups / stats.system.cpu.rename.RenameLookups"/>
      <stat name="inst_window_reads" value="stats.system.cpu.iq.int_inst_queue_reads"/>      
      <stat name="inst_window_writes" value="stats.system.cpu.iq.int_inst_queue_writes"/>
      <stat name="inst_window_wakeup_accesses" value="stats.system.cpu.iq.int_inst_queue_wakeup_accesses"/>      
      <stat name="fp_inst_window_reads" value="stats.system.cpu.iq.fp_inst_queue_reads"/>      
      <stat name="fp_inst_window_writes" value="stats.system.cpu.iq.fp_inst_queue_writes"/>
      <stat name="fp_inst_window_wakeup_accesses" value="stats.system.cpu.iq.fp_inst_queue_wakeup_accesses"/>
      
      
      <stat name="int_regfile_reads" value="stats.system.cpu.int_regfile_reads"/>
      <stat name="float_regfile_reads" value="stats.system.cpu.fp_regfile_reads"/>
      <stat name="int_regfile_writes" value="stats.system.cpu.int_regfile_writes"/>
      <stat name="float_regfile_writes" value="stats.system.cpu.fp_regfile_writes"/>
      <stat name="function_calls" value="stats.system.cpu.commit.function_calls"/>


      <stat name="ialu_accesses" value="stats.system.cpu.iq.int_alu_accesses"/>
      <stat name="fpu_accesses" value="stats.system.cpu.iq.fp_alu_accesses"/>
      <stat name="mul_accesses" value="0"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      



      
      <component id="system.core.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="local_predictor_size" value="10,3"/>
        <param name="local_predictor_entries" value="2048"/>
        <!-- param name="local_predictor_entries" value="config.cpu.0.branchPred.localPredictorSize"/ -->
        <param name="global_predictor_entries" value="8192"/>
        <!-- param name="local_predictor_entries" value="config.cpu.0.branchPred.globalPredictorSize"/ -->
        <param name="global_predictor_bits" value="2"/>
        <!-- param name="global_predictor_bits" value="config.cpu.0.branchPred.globalCtrBits"/ -->
        <param name="chooser_predictor_entries" value="8192"/>
        <!-- param name="local_predictor_entries" value="config.cpu.0.branchPred.choicePredictorSize"/ -->
        <param name="chooser_predictor_bits" value="2"/>
        
      </component>






      <component id="system.core.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <!--param name="number_entries" value="config.system.cpu.itb.size"/-->
        <stat name="total_accesses" value="stats.system.cpu.itb.wrAccesses"/>
        <stat name="total_misses" value="system.cpu.itb.wrMisses"/>
        <stat name="conflicts" value="0"/>
        
      </component>
      
      
      <component id="system.core.icache" name="icache">
        
        <param name="icache_config" value="32768,64,2,1,1,2,64,0"/>
        <!--param name="icache_config" value="config.system.cpu.icache.size,config.system.cpu.icache.block_size,config.system.cpu.icache.assoc,1,1,config.system.cpu.icache.response_latency,config.system.cpu.icache.block_size,0"/-->
        <param name="buffer_sizes" value="4,4,4,4"/>
        <!--param name="buffer_sizes" value="config.system.cpu.icache.mshrs,config.system.cpu.icache.mshrs,config.system.cpu.icache.mshrs,config.system.cpu.icache.mshrs"/-->
        <stat name="read_accesses" value="stats.system.cpu.icache.ReadReq_accesses::total"/>
        <stat name="read_misses" value="stats.system.cpu.icache.ReadReq_misses::total"/>
        <stat name="conflicts" value="stats.system.cpu.icache.replacements"/>
      </component>
      
      
      <component id="system.core.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--param name="number_entries" value="config.system.cpu.dtb.size"/-->
        <stat name="total_accesses" value="stats.system.cpu.dtb.wrAccesses"/>
        <stat name="total_misses" value="stats.system.cpu.dtb.wrMisses"/>
        <stat name="conflicts" value="0"/>
        <!--stat name="conflicts" value="system.cpu.dtb_walker_cache.replacements"/-->
      </component>
      
      
      <component id="system.core.dcache" name="dcache">
        <param name="dcache_config" value="65536,64,2,1,1,2,64,0"/>
        <!--param name="dcache_config" value="config.system.cpu.dcache.size,config.system.cpu.dcache.block_size,config.system.cpu.dcache.assoc,1,1,config.system.cpu.dcache.response_latency,config.system.cpu.dcache.block_size,0"/-->
        <param name="buffer_sizes" value="4,4,4,4"/>
        <!--param name="buffer_sizes" value="config.system.cpu.dcache.mshrs,config.system.cpu.dcache.mshrs,config.system.cpu.dcache.mshrs,config.system.cpu.dcache.mshrs"/-->
        <stat name="read_accesses" value="stats.system.cpu.dcache.ReadReq_accesses::total"/>
        <stat name="write_accesses" value="stats.system.cpu.dcache.WriteReq_accesses::total"/>
        <stat name="read_misses" value="stats.system.cpu.dcache.ReadReq_misses::total"/>
        <stat name="write_misses" value="stats.system.cpu.dcache.WriteReq_misses::total"/>
        <stat name="conflicts" value="stats.system.cpu.dcache.replacements"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.core.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="5120,4,2,1, 1,3"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="stats.system.cpu.branchPred.BTBLookups"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="stats.system.cpu.commit.branches"/>
      </component>
    </component>
    
    <component id="system.L2" name="L2">
      <param name="L2_config" value="2097152,64,8,1,1,20,64,1"/>
      <!--param name="L2_config" value="config.system.l2.size,config.system.l2.block_size,config.system.l2.assoc,1,1,config.system.l2.data_latency,config.system.l2.block_size,1"/-->
      <param name="buffer_sizes" value="20,20,20,20"/>
      <!--param name="buffer_sizes" value="config.system.l2.mshrs,config.system.l2.mshrs,config.system.l2.mshrs,config.system.l2.mshrs"/-->
      <param name="clockrate" value="1000"/>
      <!--param name="clockrate" value="1e-6/( config.system.clk_domain.clock.0 * 1e-12)"/-->
      <param name="vdd" value="0"/>
      <param name="power_gating_vcc" value="-1"/>
      <param name="ports" value="1,1,1"/>
      <param name="device_type" value="0"/>
      <stat name="read_accesses" value="stats.system.l2.ReadExReq_accesses::total"/>
      <stat name="write_accesses" value="stats.system.l2.overall_accesses::total + stats.system.l2.writebacks::total"/>
      <stat name="read_misses" value="stats.system.l2.ReadExReq_misses::total"/>
      <stat name="write_misses" value="stats.system.l2.overall_misses::total - stats.system.l2.ReadExReq_misses::total"/>
      <stat name="conflicts" value="0"/> 
      <!--stat name="conflicts" value="stats.system.l2.replacements"/--> 
      <stat name="duty_cycle" value="0.5"/>
    </component>



    <component id="system.NoC0" name="noc0">
      <param name="clockrate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1"/>
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <param name="type" value="0"/>
      <param name="horizontal_nodes" value="1"/>
      <param name="vertical_nodes" value="1"/>
      <param name="has_global_link" value="0"/>
      <!-- 1 has global link, 0 does not have global link -->
      <param name="link_throughput" value="1"/>
      <!--w.r.t clock -->
      <param name="link_latency" value="1"/>
      <!--w.r.t clock -->
      <!-- throughput >= latency -->
      <!-- Router architecture -->
      <param name="input_ports" value="1"/>
      <param name="output_ports" value="1"/>
      <!-- For bus the I/O ports should be 1 -->
      <param name="flit_bits" value="256"/>
      <param name="chip_coverage" value="1"/>
      
      <param name="link_routing_over_percentage" value="0.5"/>
      
      <stat name="total_accesses" value="stats.system.l2.demand_accesses::total * 2"/>
      <!-- This is the number of total accesses within the whole network not for each router -->
      <stat name="duty_cycle" value="1"/>
    </component>
    
    
    
    <component id="system.mc" name="mc">
      
      <param name="type" value="0"/>
      <!-- 1: low power; 0 high performance -->
      <param name="mc_clock" value="1000"/>
      <!--param name="mc_clock" value="config.system.clk_domain.clock.0"/-->
      <!--DIMM IO bus clock rate MHz-->
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1"/>
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <param name="peak_transfer_rate" value="1200"/>
      <!--MB/S-->
      <param name="block_size" value="16"/>
      <!--B-->
      <param name="number_mcs" value="1"/>
      <!-- current McPAT only supports homogeneous memory controllers -->
      <param name="memory_channels_per_mc" value="1"/>
      <param name="number_ranks" value="2"/>
      <param name="withPHY" value="0"/>
      <!--param name="withPHY" value="config.system.mem_ctrls.0.ranks_per_channel"/-->
      <!-- # of ranks of each channel-->
      <param name="req_window_size_per_channel" value="32"/>
      <param name="IO_buffer_size_per_channel" value="32"/>
      <param name="databus_width" value="32"/>
      <param name="addressbus_width" value="32"/>
      <!-- McPAT will add the control bus width to the address bus width automatically -->
      <stat name="memory_accesses" value="stats.system.mem_ctrls.readReqs + stats.system.mem_ctrls.writeReqs"/>
      <stat name="memory_reads" value="stats.system.mem_ctrls.readReqs"/>
      <stat name="memory_writes" value="stats.system.mem_ctrls.writeReqs"/>
      
    </component>
    
    
    
    <component id="system.niu" name="niu">
      
      <param name="type" value="0"/>
      <!-- 1: low power; 0 high performance -->
      <param name="clockrate" value="350"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1"/>
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <param name="number_units" value="0"/>
      <!-- unlike PCIe and memory controllers, each Ethernet controller only have one port -->
      <stat name="duty_cycle" value="1.0"/>
      <!-- achievable max load <= 1.0 -->
      <stat name="total_load_perc" value="0.7"/>
      
    </component>
    
    
    <component id="system.pcie" name="pcie">
      
      <param name="type" value="0"/>
      <!-- 1: low power; 0 high performance -->
      <param name="withPHY" value="2"/>
      <param name="clockrate" value="350"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1"/>
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <param name="number_units" value="0"/>
      <param name="num_channels" value="8"/>
      <!-- 2 ,4 ,8 ,16 ,32 -->
      <stat name="duty_cycle" value="1.0"/>
      <!-- achievable max load <= 1.0 -->
      <stat name="total_load_perc" value="0.7"/>
      
    </component>
    
    
    
    <component id="system.flashc" name="flashc">
      <param name="number_flashcs" value="0"/>
      <param name="type" value="1"/>
      <!-- 1: low power; 0 high performance -->
      <param name="withPHY" value="2"/>
      <param name="peak_transfer_rate" value="200"/>
      <!--Per controller sustain-able peak rate MB/S -->
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1"/>
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <stat name="duty_cycle" value="1.0"/>
      <!-- achievable max load <= 1.0 -->
      <stat name="total_load_perc" value="0.7"/>
      
    </component>


  </component>
</component>

